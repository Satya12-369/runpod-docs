{
    "content": "Expose ports\nThere are a few ways to expose ports on your pod to the outside world. The \ufb01rst thing that you\nshould understand is that the publicly exposed port is most likely NOT going to be the same as the\nport that you expose on your container. Let's look at an example to illustrate this.\nLet's say that I want to run a public API on my pod using uvicorn with the following command:\nThis means that uvicorn would be listening on all interfaces on port 4000. Let's now expose this port\nto the public internet using two different methods.\nThrough RunPod's Proxy\nIn this case, you would want to make sure that the port you want to expose (4000 in this case) is set\non the Template or Pod con\ufb01guration page. You can see here that I have added 4000 to the HTTP\nport list in my pod con\ufb01g. You can also do this on your template de\ufb01nition.\nuvicorn main:app --host 0.0.0.0 --port 4000\nConvert web pages and HTML files to PDF in your applications with the Pdfcrowd HTML to PDF API\nPrinted with Pdfcrowd.com\nOnce you have done this, and your server is running, you should be able to hit your server using the\npod's proxy address, which is formed in this programmatic way, where the pod ID is the unique ID of\nyour pod, and the internal port in this case is 4000:\nKeep in mind that this exposed to the public internet. While your pod ID can act as a password of\nsorts, it's not a replacement for real authentication, which should be implemented at your API level.\nThrough TCP Public IP\nIf your pod supports a public IP address, you can also expose your API over public TCP. In this case,\nyou would add the port to the TCP side of the con\ufb01guration.\nhttps://{POD_ID}-{INTERNAL_PORT}.proxy.runpod.net\nConvert web pages and HTML files to PDF in your applications with the Pdfcrowd HTML to PDF API\nPrinted with Pdfcrowd.com\nThe only difference here is that you will receive an external port mapping and a public IP address to\naccess your service. For example, your connect menu may look something like this:\nConvert web pages and HTML files to PDF in your applications with the Pdfcrowd HTML to PDF API\nPrinted with Pdfcrowd.com\nIn this case, you would be hitting your service running on 4000 with the following ip:port\ncombination\nBe aware that the public IP could potentially change when using Community Cloud, but should not\nchange when using Secure Cloud. The port will change if your pod gets reset.\nRequesting a Symmetrical Port Mapping\n73.10.226.56:10027\nConvert web pages and HTML files to PDF in your applications with the Pdfcrowd HTML to PDF API\nPrinted with Pdfcrowd.com\nFor some applications, asymmetrical port mappings are not ideal. In the above case, we have\nexternal port 10027 mapping to internal port 4000. If you need to have a symmetrical port mapping,\nyou can request them by putting in ports above 70000 in your TCP port \ufb01eld.\nOf course, 70000 isn't a valid port number, but what this does is it tells RunPod that you don't care\nwhat the actual port number is on launch, but to rather give you a symmetrical mapping. You can\ninspect the actual mapping via your connect menu:\nConvert web pages and HTML files to PDF in your applications with the Pdfcrowd HTML to PDF API\nPrinted with Pdfcrowd.com\nIn this case, I have requested two symmetrical ports and they ended up being 10030:10030 and\n10031:10031. If you need programmatic access to these in your pod, you can access them via\nenvironment variable:\nEdit this page\nRUNPOD_TCP_PORT_70001=10031\nRUNPOD_TCP_PORT_70000=10030\nConvert web pages and HTML files to PDF in your applications with the Pdfcrowd HTML to PDF API\nPrinted with Pdfcrowd.com\n"
}