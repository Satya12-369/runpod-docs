{
    "content": "Handling Errors\nWhen an exception occurs in your handler function, the RunPod SDK automatically captures it, marking the job status as FAILED  and\nreturning the exception details in the job results.\nImplementing custom error responses\nIn certain scenarios, you might want to explicitly fail a job and provide a custom error message. For instance, if a job requires a speci\ufb01c\ninput key, such as seed, you should validate this input and return a customized error message if the key is missing. Here's how you can\nimplement this:\nNOTE\nBe cautious with try/except  blocks in your handler function. Avoid suppressing errors unintentionally. You should either return\nthe error for a graceful failure or raise it to \ufb02ag the job as FAILED .\nOne design pattern to consider, is to Refresh your Worker when an error occurs.\nEdit this page\nimport runpod\ndef handler(job):\n    job_input = job[\"input\"]\n    # Validate the presence of the 'seed' key in the input\n    if not job_input.get(\"seed\", False):\n        return {\n            \"error\": \"Input is missing the 'seed' key. Please include a seed and retry your request.\"\n        }\n    # Proceed if the input is valid\n    return \"Input validation successful.\"\n# Start the RunPod serverless function\nrunpod.serverless.start({\"handler\": handler})\nConvert web pages and HTML files to PDF in your applications with the Pdfcrowd HTML to PDF API\nPrinted with Pdfcrowd.com\n"
}