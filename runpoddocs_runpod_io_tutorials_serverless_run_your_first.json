{
    "content": "Serverless\nRun your \ufb01rst serverless endpoint with Stable Diffusion\nOn this page\nRun your \ufb01rst serverless endpoint with Stable\nDiffusion\nNOTE\nBefore we begin, ensure you have a RunPod API key, available under your user settings.\nThis key is crucial for identi\ufb01cation and billing purposes. Keep it secure! Also, remember to\nretrieve your results via the status endpoint within 30 minutes, as your inputs and outputs\nare not stored longer than this for privacy protection.\nOverview\nIn this section, we'll explore how RunPod's API works. It's asynchronous, meaning that when you\nsend a request, you get a job ID back almost instantly. Next, we'll show you how to use this job ID\nto check the status and retrieve your results.\nLet's dive into an example using the Stable Diffusion v1 inference endpoint.\nCreate a serverless worker\nFirst, let's set up your serverless worker. Begin by selecting Quick Deploy on the RunPod\ninterface. Then choose Start from the Stable Diffusion v1.5 options. Pick a GPU, say a 24 GB\nGPU, and click Deploy. Here\u2019s an example endpoint you might use:\nhttps://api.runpod.ai/v2/{ID}/runsync\nStart Your Job\nNow, to initiate a job, you'll make a request like the one shown below. This sends your\nparameters to the API and starts the process.\nAsk AI\nAsk AI\nRunPod\nUpon doing this, you'll receive a response like this, containing your unique job ID:\nCheck the Status of Your Job\nSince your initial response doesn't include the output, a subsequent call is necessary. Use your\njob ID to check the job's status as follows:\nIf your job is still processing, the response will indicate that. Here's an example:\nGet Completed Job Status\nOnce your job is complete, you'll receive a \ufb01nal response like this:\ncurl -X POST https://api.runpod.ai/v2/{ID}/run \\\n    -H 'Content-Type: application/json'                             \\\n    -H 'Authorization: Bearer [Your API Key]'    \\\n    -d '{\"input\": {\"prompt\": \"A cute fluffy white dog in the style of a Pi\n{\n  \"id\": \"c80ffee4-f315-4e25-a146-0f3d98cf024b\",\n  \"status\": \"IN_QUEUE\"\n}\ncurl https://api.runpod.ai/v2/{ID}/status/c80ffee4-f315-4e25-a146-0f3d98cf\n-H 'Content-Type: application/json' \\\n-H 'Authorization: Bearer [Your API Key]'\n{\n  \"delayTime\": 2624,\n  \"id\": \"c80ffee4-f315-4e25-a146-0f3d98cf024b\",\n  \"input\": {\n    \"prompt\": \"A cute fluffy white dog in the style of a Pixar animation 3\n  },\n  \"status\": \"IN_PROGRESS\"\n}\nAsk AI\nAsk AI\nTo save the output, use the following command:\nNOTE\nRemember, you have up to 1 hour to retrieve your results via the status endpoint for privacy\nreasons.\nGet Your Results\nFinally, to view your results, decode the base64 image from the output. Here's how you can do it\nin Python:\n{\n  \"delayTime\": 17158,\n  \"executionTime\": 4633,\n  \"id\": \"fb5a249d-12c7-48e5-a0e4-b813c3381262-22\",\n  \"output\": [\n    {\n      \"image\": \"base64image\",\n      \"seed\": 40264\n    }\n  ],\n  \"status\": \"COMPLETED\"\n}\ncurl https://api.runpod.ai/v2/{ID}/status/c80ffee4-f315-4e25-a146-0f3d98cf\n    -H 'Content-Type: application/json' \\\n    -H 'Authorization: Bearer [Your API Key]' | jq . > output.json\nimport json\nimport base64\ndef decode_and_save_image(json_file_path, output_image_path):\n    try:\n        # Reading the JSON file\n        with open(json_file_path, \"r\") as file:\n            data = json.load(file)\n        # Extracting the base64 encoded image data\n        base64_image = data[\"output\"][0][\"image\"]\nAsk AI\nAsk AI\nCongratulations! You've now successfully used RunPod's Stable Diffusion API to generate\nimages.\n        # Decode the Base64 string\n        decoded_image_data = base64.b64decode(base64_image)\n        # Writing the decoded data to an image file\n        with open(output_image_path, \"wb\") as image_file:\n            image_file.write(decoded_image_data)\n        print(f\"Image successfully decoded and saved as '{output_image_pat\n    except FileNotFoundError:\n        print(\n            \"File not found. Please ensure the JSON file exists in the spe\n        )\n    except KeyError as e:\n        print(f\"Error in JSON structure: {e}\")\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n# Usage\njson_file_path = \"output.json\"  # Path to your JSON file\noutput_image_path = \"decoded_image.png\"  # Desired path for the output ima\ndecode_and_save_image(json_file_path, output_image_path)\nAsk AI\nAsk AI\nEdit this page\nPrevious\n\u00ab Run Fooocus in Jupyter Notebook\nNext\nGenerate images with SDXL Turbo \u00bb\nDocs\nOverview\nTutorials\nAI APIs\nCommunity\nDiscord\nAsk AI\nAsk AI\nContact us\nMore\nBlog\nGitHub\nCopyright \u00a9 2024 RunPod\nAsk AI\nAsk AI\n"
}