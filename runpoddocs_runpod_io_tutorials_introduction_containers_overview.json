{
    "content": "Introduction\nContainers\nContainers overview\nOn this page\nContainers overview\nWhat are containers?\nA container is an isolated environment for your code. This means that a container has no\nknowledge of your operating system, or your \ufb01les. It runs on the environment provided to\nyou by Docker Desktop. Containers have everything that your code needs in order to run,\ndown to a base operating system.\nFrom Docker's website\nDevelopers package their applications, frameworks, and libraries into a Docker container and\nship those containers to be run outside their development environment.\nWhy use containers?\nBuild, ship, and run anywhere.\nContainers are self-contained and can run anywhere Docker can run. This means you can run a\ncontainer on-premises or in the cloud, as well as in hybrid environments. Containers contain not\nonly the application but also the dependencies; libraries and frameworks, con\ufb01guration data, and\ncerti\ufb01cates needed to run your application.\nHere's a revised and more readable version of your text:\nWhat are images\nDocker images are immutable templates essential for creating containers. They ensure that\napplications operate consistently and reliably across different environments, which is vital for\nmodern software development.\nThe creation of Docker images involves a process known as \"Docker build\". This process uses a\nDocker\ufb01le, a text document containing a sequence of commands. These commands are\nessentially instructions guiding Docker on how to build the image.\nAsk AI\nAsk AI\nRunPod\nWhy use images?\nUsing Docker images is crucial in various stages of software development, including testing,\ndevelopment, and deployment. They play a key role in ensuring a seamless work\ufb02ow across\ndiverse computing environments.\nWhat is Docker Hub?\nAfter their creation, Docker images are stored in a registry, such as Docker Hub. From these\nregistries, images can be easily downloaded and used to generate containers, facilitating\nwidespread distribution and deployment of applications.\nNow that you've got an understanding of Docker, containers, and images, let's move on to\ninstalling Docker.\nInstalling Docker\nFor this walkthrough, it is recommended to install Docker Desktop. Docker Desktop is bundled\nwith a variety of tools including:\nDocker GUI\nDocker CLI\nDocker extensions\nDocker Compose\nThe majority of this walkthrough will be using the Docker CLI, but feel free to use the GUI if you\nprefer.\nFor the best installation experience, consult Docker's o\ufb03cial documentation.\nRunning your \ufb01rst command\nNow that Docker is installed, open a terminal window and run the following command:\nYou should see something similar to the following output.\ndocker version\nAsk AI\nAsk AI\nIf at any point you need help with a command, you can use the --help  \ufb02ag to provide\ndocumentation on the command you're running.\nLet's run busybox  from the command line to print out today's date.\nbusybox  is a lightweight Docker image with the bare minimum Linux utilities installed,\nincluding echo\nThe echo  command prints the container's uptime.\ndocker version\nClient: Docker Engine - Community\n Version:           24.0.7\n API version:       1.43\n Go version:        go1.21.3\n Git commit:        afdd53b4e3\n Built:             Thu Oct 26 07:06:42 2023\n OS/Arch:           darwin/arm64\n Context:           desktop-linux\nServer: Docker Desktop 4.26.1 (131620)\n Engine:\n  Version:          24.0.7\n  API version:      1.43 (minimum version 1.12)\n  Go version:       go1.20.10\n  Git commit:       311b9ff\n  Built:            Thu Oct 26 09:08:15 2023\n  OS/Arch:          linux/arm64\n  Experimental:     false\n containerd:\n  Version:          1.6.25\n  GitCommit:       abcd\n runc:\n  Version:          1.1.10\n  GitCommit:        v1.1.10-0-g18a0cb0\n docker-init:\n  Version:          0.19.0\ndocker --help\ndocker run busybox sh -c 'echo \"The time is: $(date)\"'\n# The time is: Thu Jan 11 06:35:39 UTC 2024\nAsk AI\nAsk AI\nEdit this page\nPrevious\n\u00ab Containers\nNext\nDocker\ufb01le \u00bb\nDocs\nOverview\nTutorials\nAI APIs\nCommunity\nDiscord\nContact us\nMore\nBlog\nGitHub\nCopyright \u00a9 2024 RunPod\nAsk AI\nAsk AI\n"
}