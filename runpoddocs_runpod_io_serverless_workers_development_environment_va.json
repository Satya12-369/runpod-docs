{
    "content": "Serverless\nWorkers\nDevelopment\nUse environment variables\nOn this page\nUse environment variables\nIncorporating environment variables into your Handler Functions is a key aspect of managing\nexternal resources like S3 buckets.\nThis section focuses on how to use environment variables to facilitate the uploading of images\nsto an S3 bucket using RunPod Handler Functions.\nThis will go through the process of writing Python code for the uploading and setting the\nnecessary environment variables in the Web interface.\nPrerequistes\nEnsure the RunPod Python library is installed: pip install runpod .\nHave an image \ufb01le named image.png  in the Docker container's working directory.\nPython Code for S3 Uploads\nLet's break down the steps to upload an image to an S3 bucket using Python:\n1. Handler Function for S3 Upload: Here's an example of a handler function that uploads\nimage.png  to an S3 bucket and returns the image URL:\nfrom runpod.serverless.utils import rp_upload\nimport runpod\ndef handler(job):\n    image_url = rp_upload.upload_image(job[\"id\"], \"./image.png\")\n    return [image_url]\nrunpod.serverless.start({\"handler\": handler})\nAsk AI\nAsk AI\nRunPod\n2. Packaging Your Code: Follow the guidelines in Worker Image Creation for packaging and\ndeployment.\nSetting Environment Variables for S3\nUsing environment variables securely passes the necessary credentials and con\ufb01gurations to\nyour serverless function:\n1. Accessing Environment Variables Setting: In the template creation/editing interface of your\npod, navigate to the bottom section where you can set environment variables.\n2. Con\ufb01guring S3 Variables: Set the following key variables for your S3 bucket:\nBUCKET_ENDPOINT_URL\nBUCKET_ACCESS_KEY_ID\nBUCKET_SECRET_ACCESS_KEY  Ensure that your BUCKET_ENDPOINT_URL  includes the\nbucket name (e.g., https://your-bucket-name.nyc3.digitaloceanspaces.com ,\nhttps://your-bucket-name.nyc3.digitaloceanspaces.com ).\nTesting Your API\nFinally, let's test the serverless function to con\ufb01rm that it successfully uploads images to your S3\nbucket:\n1. Making a Request: Make a POST request to your API endpoint with the necessary headers\nand input data. Remember, the input must be a JSON item:\n2. Checking the Output: Make a GET request to retrieve the job status and output. Here\u2019s an\nexample of how to do it:\nimport requests\nendpoint = \"https://api.runpod.ai/v2/xxxxxxxxx/run\"\nheaders = {\"Content-Type\": \"application/json\", \"Authorization\": \"Beare\ninput_data = {\"input\": {\"inp\": \"this is an example input\"}}\nresponse = requests.post(endpoint, json=input_data, headers=headers)\nAsk AI\nAsk AI\nThe response should include the URL of the uploaded image on completion:\nBy following these steps, you can effectively use environment variables to manage S3 bucket\ncredentials and operations within your RunPod Handler Functions. This approach ensures\nsecure, scalable, and e\ufb03cient handling of external resources in your serverless applications.\nEdit this page\nPrevious\n\u00ab Test locally\nNext\nTest response time \u00bb\nDocs\nOverview\nTutorials\nAI APIs\nCommunity\nresponse = requests.get(\n    \"https://api.runpod.ai/v2/xxxxxxxxx/status/\" + response.json()[\"id\n    headers=headers,\n)\nresponse.json()\n{\n  \"delayTime\": 86588,\n  \"executionTime\": 1563,\n  \"id\": \"e3d2e250-ea81-4074-9838-1c52d006ddcf\",\n  \"output\": [\n    \"https://your-bucket.s3.us-west-004.backblazeb2.com/your-image.png\n  ],\n  \"status\": \"COMPLETED\"\n}\nAsk AI\nAsk AI\nDiscord\nContact us\nMore\nBlog\nGitHub\nCopyright \u00a9 2024 RunPod\nAsk AI\nAsk AI\n"
}