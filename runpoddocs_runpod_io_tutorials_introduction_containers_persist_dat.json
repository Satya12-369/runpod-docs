{
    "content": "Introduction\nContainers\nPersist data outside of containers\nOn this page\nPersist data outside of containers\nIn the previous step, you created a Docker\ufb01le and executed a command. Now, you'll learn how to\npersist data outside of containers.\nNOTE\nThis walk through teach you how to persist data outside of container. RunPod has the\nsame concept used for attaching a Network Volume to your Pod.\nConsult the documentation on attaching a Network Volume to your Pod.\nWhy persist data outside of a container?\nThe key goal is to have data persist across multiple container runs and removals.\nBy default, containers are ephemeral - everything inside them disappears when they exit.\nSo running something like:\nWould only write the date to file.txt  temporarily inside that container. As soon as the\ncontainer shuts down, that \ufb01le and data is destroyed. This isn't great when you're training data\nand want your information to persist past your LLM training.\nBecause of this, we need to persist data outside of the container. Let's take a look at a work\ufb02ow\nyou can use to persist data outside of a container.\nCreate a named volume\ndocker run busybox date > file.txt\nAsk AI\nAsk AI\nRunPod\nFirst, we'll create a named volume to represent the external storage:\nUpdate Docker\ufb01le\nNext, we'll modify our Docker\ufb01le to write the date output to a \ufb01le rather than printing directly to\nstdout:\nThis sets the working directory to /data , touches a \ufb01le called current_date.txt , and copies\nour script.\nUpdate entrypoint script\nThe entrypoint.sh  script is updated:\nThis will write the date to the /data/current_date.txt  \ufb01le instead of printing it.\nMount the volume\nNow when the container runs, this will write the date to the /data/current_date.txt  \ufb01le\ninstead of printing it.\nFinally, we can mount the named volume to this data directory:\ndocker volume create date-volume\nFROM busybox\nWORKDIR /data\nRUN touch current_date.txt \nCOPY entrypoint.sh /\nRUN chmod +x /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\n#!/bin/sh\ndate > /data/current_date.txt\ndocker run -v date-volume:/data my-image\nAsk AI\nAsk AI\nThis runs a container from my-image and mounts the date-volume  Docker volume to the /data\ndirectory in the container. Anything written to /data  inside the container will now be written to\nthe date-volume  on the host instead of the container's ephemeral \ufb01lesystem. This allows the\ndata to persist. Once the container exits, the date output \ufb01le is safely stored on the host volume.\nAfter the container exits, we can exec into another container sharing the volume to see the\npersisted data \ufb01le:\nThis runs a new busybox container and also mounts the date-volume .\nUsing the same - v date-volume:/data mount  point maps the external volume dir to\n/data  again.\nThis allows the new container to access the persistent date \ufb01le that the \ufb01rst container\nwrote.\nThe cat /data/current_date.txt  command prints out the \ufb01le with the date output\nfrom the \ufb01rst container.\nThe --rm \ufb02ag removes the container after running so we don't accumulate stopped\ncontainers.\nNOTE\nRemember, this is a general tutorial on Docker. These concepts will help give you a better\nunderstanding on working with RunPod.\nEdit this page\nPrevious\n\u00ab Docker\ufb01le\nNext\nDocker commands \u00bb\nDocs\nOverview\nTutorials\ndocker run --rm -v date-volume:/data busybox cat /data/current_date.txt\nAsk AI\nAsk AI\nAI APIs\nCommunity\nDiscord\nContact us\nMore\nBlog\nGitHub\nCopyright \u00a9 2024 RunPod\nAsk AI\nAsk AI\n"
}