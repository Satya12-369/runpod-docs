{
    "content": "Serverless\nWorkers\nHandler Functions\nAdditional controls\nOn this page\nAdditional controls\nUpdate progress\nProgress updates can be sent out from your worker while a job is in progress. Progress updates\nwill be available when the status is polled. To send an update, call the\nrunpod.serverless.progress_update  function with your job and context of your update.\nRefresh Worker\nWhen completing long-running job requests or complicated requests that involve a lot of reading\nand writing \ufb01les, starting with a fresh worker can be bene\ufb01cial each time. A \ufb02ag can be returned\nwith the resulting job output to stop and refresh the used worker. This behavior is achieved by\ndoing the following within your worker:\nimport runpod\ndef handler(job):\n    for update_number in range(0, 3):\n        runpod.serverless.progress_update(job, f\"Update {update_number}/3\"\n    return \"done\"\nrunpod.serverless.start({\"handler\": handler})\n# Requires runpod python version 0.9.0+\ndef your_handler(job):\n    # Your handler functionality here.\n    return {\"refresh_worker\": True, \"job_results\": \"can be anything\"}\nAsk AI\nAsk AI\nRunPod\nYour handler must return a dictionary that contains the refresh_worker; this \ufb02ag will be removed\nbefore the remaining job output is returned.\nNOTE\nRefreshing a worker does not impact billing or count for/against your min, max, and\nwarmed workers. It simply \"resets\" that worker at the end of a job.\nEdit this page\nPrevious\n\u00ab Handling Errors\nNext\nDevelopment \u00bb\nDocs\nOverview\nTutorials\nAI APIs\nCommunity\nDiscord\nContact us\nMore\nBlog\nGitHub\nCopyright \u00a9 2024 RunPod\nAsk AI\nAsk AI\n"
}