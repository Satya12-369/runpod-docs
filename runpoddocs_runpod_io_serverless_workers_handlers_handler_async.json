{
    "content": "Asynchronous Handler\nRunPod supports the use of asynchronous handlers, enabling e\ufb03cient handling of tasks that bene\ufb01t from non-blocking operations. This\nfeature is particularly useful for tasks like processing large datasets, interacting with APIs, or handling I/O-bound operations.\nWriting asynchronous Handlers\nAsynchronous handlers in RunPod are written using Python's async  and await  syntax. Below is a sample implementation of an\nasynchronous generator handler. This example demonstrates how you can yield multiple outputs over time, simulating tasks such as\nprocessing data streams or generating responses incrementally.\nBene\ufb01ts of asynchronous Handlers\nE\ufb03ciency: Asynchronous handlers can perform non-blocking operations, allowing for more tasks to be handled concurrently.\nScalability: They are ideal for scaling applications, particularly when dealing with high-frequency requests or large-scale data\nprocessing.\nFlexibility: Async handlers provide the \ufb02exibility to yield results over time, suitable for streaming data and long-running tasks.\nBest practices\nWhen writing asynchronous handlers:\nEnsure proper use of async  and await  to avoid blocking operations.\nConsider the use of yield  for generating multiple outputs over time.\nTest your handlers thoroughly to handle asynchronous exceptions and edge cases.\nUsing asynchronous handlers in your RunPod applications can signi\ufb01cantly enhance performance and responsiveness, particularly for\napplications requiring real-time data processing or handling multiple requests simultaneously.\nEdit this page\nimport runpod\nimport asyncio\nasync def async_generator_handler(job):\n    for i in range(5):\n        # Generate an asynchronous output token\n        output = f\"Generated async token output {i}\"\n        yield output\n        # Simulate an asynchronous task, such as processing time for a large language model\n        await asyncio.sleep(1)\n# Configure and start the RunPod serverless function\nrunpod.serverless.start(\n    {\n        \"handler\": async_generator_handler,  # Required: Specify the async handler\n        \"return_aggregate_stream\": True,  # Optional: Aggregate results are accessible via /run endpoint\n    }\n)\nConvert web pages and HTML files to PDF in your applications with the Pdfcrowd HTML to PDF API\nPrinted with Pdfcrowd.com\n"
}