{
    "content": "Serverless\nGenerate images with SDXL Turbo\nOn this page\nGenerate images with SDXL Turbo\nWhen it comes to working with an AI image generator, the speed in which images are generated\nis often a compromise. RunPod's Serverless Workers allows you to host SDXL Turbo from\nStability AI, which is a fast text-to-image model.\nIn this tutorial, you'll build a web application, where you'll leverage RunPod's Serverless Worker\nand Endpoint to return an image from a text-based input.\nBy the end of this tutorial, you'll have an understanding of running a Serverless Worker on\nRunPod and sending requests to an Endpoint to receive a response.\nYou can proceed with the tutorial by following the build steps outlined here or skip directly to\nDeploy a Serverless Endpoint section.\nPrerequisites\nThis section presumes you have an understanding of the terminal and can execute commands\nfrom your terminal.\nBefore starting this tutorial, you'll need access to:\nRunPod\nTo continue with this quick start, you'll need access to the following from RunPod:\nRunPod account\nRunPod API Key\nDocker\nTo build your Docker image, you'll need access to the following:\nAsk AI\nAsk AI\nRunPod\nDocker installed\nDocker account\nYou can also use the prebuilt image from runpod/sdxl-turbo.\nGitHub\nTo clone the worker-sdxl-turbo  repo, you'll need access to the following:\nGit installed\nPermissions to clone GitHub repos\nWith the prerequisites covered, get started by building and pushing a Docker image to a\ncontainer registry.\nBuild and push your Docker image\nThis step will walk you through building and pushing your Docker image to your container\nregistry. This is useful to building custom images for your use case. If you prefer, you can use\nthe prebuilt image from runpod/sdxl-turbo instead of building your own.\nBuilding a Docker image allows you to specify the container when creating a Worker. The Docker\nimage includes the RunPod Handler which is how you provide instructions to Worker to perform\nsome task. In this example, the Handler is responsible for taking a Job and returning a base 64\ninstance of the image.\n1. Clone the RunPod Worker SDXL Turbo repository:\n2. Navigate to the root of the cloned repo:\n3. Build the Docker image:\n4. Push your container registry:\ngh repo clone runpod-workers/worker-sdxl-turbo\ncd worker-sdxl-turbo\ndocker build --tag <username>/<repo>:<tag> .\nAsk AI\nAsk AI\nNow that you've pushed your container registry, you're ready to deploy your Serverless Endpoint\nto RunPod.\nDeploy a Serverless Endpoint\nThe container you just built will run on the Worker you're creating. Here, you will con\ufb01gure and\ndeploy the Endpoint. This will include the GPU and the storage needed for your Worker.\nThis step will walk you through deploying a Serverless Endpoint to RunPod.\n1. Login to the RunPod Serverless console.\n2. Select + New Endpoint.\n3. Provide the following:\ni. Endpoint name.\nii. Select a GPU.\niii. Con\ufb01gure the number of workers.\niv. (optional) Select FlashBoot.\nv. (optional) Select a template.\nvi. Enter the name of your Docker image.\nFor example, runpod/sdxl-turbo:latest .\nvii. Specify enough memory for your Docker image.\n4. Select Deploy.\nNow, let's send a request to your Endpoint.\nSend a request\nNow that our Endpoint is deployed, you can begin interacting with and integrating it into an\napplication. Before writing the logic into the applicaiton, ensure that you can interact with the\nEndpoint by sending a request.\nRun the following command:\ncURL\nOutput\ndocker push <username>/<repo>:<tag>\nAsk AI\nAsk AI\nExport your variable names in your terminal session or replace them in line:\nYOUR_ENDPOINT : The name of your Endpoint.\nYOUD_API_KEY : The API Key required with read and write access.\nYOUR_PROMPT : The custom prompt passed to the model.\nYou should se the output. The status will return PENDING ; but quickly change to COMPLETED  if\nyou query the Job Id.\nIntegrate into your application\nNow, let's create a web application that can take advantage of writing a prompt and generate an\nimage based on that prompt. While these steps are speci\ufb01c to JavaScript, you can make\nrequests against your Endpoint in any language of your choice.\nTo do that, you'll create two \ufb01les:\nindex.html : The frontend to your web application.\nscript.js : The backend which handles the logic behind getting the prompt and the call to\nthe Serverless Endpoint.\nHTML\nJavaScript\ncurl -X POST \"https://api.runpod.ai/v2/${YOUR_ENDPOINT}/runsync\" \\\n     -H \"accept: application/json\" \\\n     -H \"content-type: application/json\" \\\n     -H \"authorization: ${YOUR_API_KEY}\" \\\n     -d '{\n        \"input\": {\n            \"prompt\": \"${YOUR_PROMPT}\",\n            \"num_inference_steps\": 25,\n            \"refiner_inference_steps\": 50,\n            \"width\": 1024,\n            \"height\": 1024,\n            \"guidance_scale\": 7.5,\n            \"strength\": 0.3,\n            \"seed\": null,\n            \"num_images\": 1\n        }\n     }'\nAsk AI\nAsk AI\nThe HTML \ufb01le ( index.html ) sets up a user interface with an input box for the prompt and a\nbutton to trigger the image generation.\n1. Replace ${process.env.REACT_APP_AUTH_TOKEN}  with your actual API key.\n2. Replace ${process.env.REACT_APP_ENDPOINT_ID}  with your speci\ufb01c Endpoint.\n3. Open index.html  in a web browser, enter a prompt, and select Generate Image to see the\nresult.\nThis web application serves as a basic example of how to interact with your RunPod serverless\nendpoint from a client-side application. It can be expanded or modi\ufb01ed to \ufb01t more complex use\ncases.\n<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>RunPod AI Image Generator</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            text-align: center;\n            padding: 20px;\n        }\n        #imageResult {\n            margin-top: 20px;\n        }\n    </style>\n</head>\n<body>\n    <h1>RunPod AI Image Generator</h1>\n    <input type=\"text\" id=\"promptInput\" placeholder=\"Enter your image prom\n    <button onclick=\"generateImage()\">Generate Image</button>\n    <div id=\"imageResult\"></div>\n    <script src=\"script.js\"></script>\n</body>\n</html>\nAsk AI\nAsk AI\nRun a server\nYou can run a server through Python or by opening the index.html  page in your browser.\nPython\nFile explorer\nRun the following command to start a server locally using Python.\nEdit this page\nPrevious\n\u00ab Run your \ufb01rst serverless endpoint with\nStable Diffusion\nNext\nRun your \ufb01rst AI API with Stable Diffusion\n\u00bb\nDocs\nOverview\nTutorials\nAI APIs\nCommunity\nDiscord\nContact us\nMore\nBlog\nGitHub\npython -m http.server 8000\nAsk AI\nAsk AI\nCopyright \u00a9 2024 RunPod\nAsk AI\nAsk AI\n"
}