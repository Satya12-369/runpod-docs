{
    "content": "Overview\nThe Handler Function is responsible for processing submitted inputs and generating the resulting\noutput. When developing your Handler Function, you can do so locally on your PC or remotely on a\nRunPod GPU instance.\nExample Handler Functions can be found within the repos of our runpod-workers.\nWhy use Handler Functions?\nHandler Functions offer a paradigm shift in how you approach backend code execution:\nE\ufb03ciency: Focus on writing code that matters without worrying about the server lifecycle.\nCost-Effective: You only pay for the time your functions are running, not idle server time.\nRapid Deployment: Quickly update and deploy functions, enabling faster iteration and response\nto changes.\nYour Handler Function only accepts requests using your own account's API key, not any RunPod API\nkey.\nJob input\nBefore we look at the Handler Function, it is essential \ufb01rst to understand what a job request input\nwill look like; later, we will cover all of the input options in detail; for now, what is essential is that\nyour handler should be expecting a JSON dictionary to be passed in. At a minimum, the input will be\nformatted as such:\nRequirements\nYou will need to have the RunPod Python SDK installed; this can be done by running pip install\nrunpod .\n{\n  \"id\": \"A_RANDOM_JOB_IDENTIFIER\",\n  \"input\": { \"key\": \"value\" }\n}\nConvert web pages and HTML files to PDF in your applications with the Pdfcrowd HTML to PDF API\nPrinted with Pdfcrowd.com\nBasic Handler Function\nYou must return something as output when your worker is done processing the job. This can directly\nbe the output, or it can be links to cloud storage where the artifacts are saved. Keep in mind that the\ninput and output payloads are limited to 2MB each\nNOTE\nKeep setup processes and functions outside of your handler function. For example, if you are\nrunning models make sure they are loaded into VRAM prior to calling serverless.start\nwith your handler function.\nDevelopment and deployment\nYou should return something as output for when your Worker is done processing a job. This can be\ndirectly the output, or it can be links to cloud storage where the artifacts are saved.\nPayloads are limited to:\nrun  10 MB.\nrunsync : 20 MB.\nIf any errors are returned by the worker while running a test_input  job, the worker will exit with a\nnon-zero exit code. Otherwise, the worker will exit with a zero exit code. This can be used to check if\nthe worker ran successfully, for example, in a CI/CD pipeline.\nFor information on testing your handler locally, see Local testing.\n# your_handler.py\nimport runpod  # Required.\ndef handler(job):\n    job_input = job[\"input\"]  # Access the input from the request.\n    # Add your custom code here.\n    return \"Your job results\"\nrunpod.serverless.start({\"handler\": handler})  # Required.\nConvert web pages and HTML files to PDF in your applications with the Pdfcrowd HTML to PDF API\nPrinted with Pdfcrowd.com\nFor information on setting a continuous integration pipeline, see Continuous integration.\nEdit this page\nConvert web pages and HTML files to PDF in your applications with the Pdfcrowd HTML to PDF API\nPrinted with Pdfcrowd.com\n"
}